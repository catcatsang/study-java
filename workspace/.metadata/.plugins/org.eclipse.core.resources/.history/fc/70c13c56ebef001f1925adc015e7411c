package com.app.domain.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.app.domain.vo.ReplyVO;
import com.app.jdbc.configuration.Configuration;

public class ReplyDAO {
	private Connection connection;
	private PreparedStatement preparedStatement;
	private ResultSet resultSet;

//	추가 
	public void insert(ReplyVO replyVO) {
		String query = "INSERT INTO TBL_REPLY " + "(ID, REPLY_CONTENT, POST_ID, MEMBER_ID) "
				+ "VALUES(SEQ_REPLY.NEXTVAL, ?, ?, ?)";

		connection = Configuration.getConnection();

		try {
			preparedStatement = connection.prepareStatement(query);

			preparedStatement.setString(1, replyVO.getReplyContent());
			preparedStatement.setLong(2, replyVO.getPostId());
			preparedStatement.setLong(3, replyVO.getMemberId());

			preparedStatement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (preparedStatement != null) {
					preparedStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (SQLException e) {
				throw new RuntimeException();
			}
		}

	}

//	수정
	public void update(ReplyVO replyVO) {
		String query = "UPDATE TBL_REPLY " + "SET REPLY_CONTENT=?, POST_ID=?, MEMBER_ID=? " + "WHERE ID=?";

		connection = Configuration.getConnection();
		try {
			preparedStatement = connection.prepareStatement(query);

			preparedStatement.setString(1, replyVO.getReplyContent());
			preparedStatement.setLong(2, replyVO.getPostId());
			preparedStatement.setLong(3, replyVO.getMemberId());
			preparedStatement.setLong(4, replyVO.getId());

			preparedStatement.executeUpdate();
		} catch (SQLException e) {
		} finally {
			try {
				if (preparedStatement != null) {
					preparedStatement.close();
				}
				if (connection != null) {
					preparedStatement.close();
				}

			} catch (SQLException e) {
				throw new RuntimeException();
			}
		}
	}

//	삭제
	public void delete(Long id) {
		String query = "DELETE FROM TBL_REPLY "
				+ "WHERE ID=?";
		
		connection = Configuration.getConnection();
		
		try {
			preparedStatement = connection.prepareStatement(query);
			
			preparedStatement.setLong(1, id);
			
			preparedStatement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(preparedStatement != null) {
					preparedStatement.close();
				}
				if(connection != null) {
					connection.close();
				}
			} catch (SQLException e) {
				throw new RuntimeException();
			}
		}
				
	}
}
