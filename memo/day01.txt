JAVA - 프로그래밍 언어
   프로그래밍 언어는 개발자와 운영체제가 소통하기 위한 언어이다.

소스코드
   명령어를 작성해 놓은 것.
   개발자와 운영체제가 소통할 것을 글로 작성해 놓은 것.

소스파일(.java)
   소스코드를 작성해 놓은 파일

컴파일
   사람의 언어를 컴퓨터 언어로 바꿔주는 작업.

컴파일러
   컴파일을 해주는 프로그램 또는 명령어
   컴파일러는 위에서 아래로, 좌에서 우로 번역한다.

프로그램
   소스코드로 잘 짜여진 틀.

콘솔
   개발자와 운영체제가 소통한 결과를 보여주는 창.

▶ 일반 프로그램
   프로그램
   OS(운영체제): 하드웨어에 적절한 전기신호를 흘려주는 역할.
   하드웨어

▶ JAVA 프로그램
   JAVA 프로그램
   JVM: JAVA 프로그램을 OS에 맞게 변환해준다.
   OS(운영체제): 하드웨어에 적절한 전기신호를 흘려주는 역할.
   하드웨어

   - 이식성이 좋다.
-----------------------------------------------------------------------------------------------------------------------------
JVM(Java Vritual Machine)
   JAVA 프로그램을 실행해 줌.

JRE(Java Runtime Environment)
   JVM을 생성하며, 실행할 때 필요한 라이브러리 파일들을 가지고 있다.

JDK(Java Development Kit)
   JRE 외에 개발에 필요한 도구들을 가지고 있다.
   컴파일 명령어와 실행 명령어를 담고 있다.
---------------------------------------------------------------------------------------------------------------------
JDK 설치
   https://drive.google.com/file/d/1bsLuMXWQ-yg50m4SNToucnhEBMLSg6He/view?usp=drive_link


IDE 설치
   - 이클립스
      https://drive.google.com/file/d/18qYUbfdkXWrX0hbSnvFOuihh9MXI_k7j/view?usp=drive_link

   - 인텔리제이
---------------------------------------------------------------------------------------------------------------------
기본 구조
   프로젝트
      패키지
         클래스
            메소드
               소스코드
---------------------------------------------------------------------------------------------------------------------
출력 메소드
   1. print(): 마지막에 자동으로 줄바꿈되지 않고 아래 문장과 이어서 출력된다.
   2. println(): 마지막에 자동으로 줄바꿈된다.
   3. printf()

출력 메소드를 사용하는 이유
   데이터를 확인하기 위해서 사용하는 도구이다.
   오류를 구체화하기 위해 사용하는 도구이다.
   즉, 출력 메소드는 개발자를 위한 도구이다.

   A 코드
   B 코드
   C 코드
   D 코드

   오류 발생시 어떤 라인에서 발생했는 지 알 수 없다.

   A 코드
   System.out.println("A")
   B 코드
   System.out.println("B")
   C 코드
   System.out.println("C")
   D 코드
   System.out.println("D")

   C가 콘솔에 출력되었다면, 위에서 아래로 번역되기 때문에 D 코드에 문제가 발생한 것으로 판단된다.
---------------------------------------------------------------------------------------------------------------------
변수
   변수는 저장공간이다.

   x   =   10
      저장공간의   대입   값(상수)
   이름   연산자

자료형(type)
   자료형은 저장공간의 종류이다.

   자료형      type      byte      값

   정수형      byte      1      4, 1, -12, 10, ...
         short      2      9, 150, -55 ...
         int      4      1235, 48916, -2147483648, ...
         long      8      15161848964L, -489415L, ...

   실수형      float      4      32.12F, 182.2341F, ...
         double      8      32.12, 182.2341, ...
   문자형      char      2      'A', '0', '안', ...
   문자열      String      ???      "ABC", "12.52", "123", "안녕", ...

변수의 선언
   자료형 변수명 = 초기값;   ◀ 초기화
   자료형 변수명;

   예)
   int x = 10;
   x라는 이름의 정수형 저장공간이 할당(allocation)되고 그 안에 10이 들어간다.

변수의 초기값
   정수: 0
   실수: 0.0
   문자: ' '
   문자열: "", null


변수의 사용
   저장공간의 확인 단계
   1단계: 자료형을 확인한다.
   2단계: 대입 연산자를 확인한다.

   int data = 10;   // 저장공간
   data + 9;      // 값
   data = data + 99   // 저장공간, 값

변수 선언 시 주의사항
   1. 같은 이름의 변수로 선언할 수 없다.
   2. 초기화를 해준다.
   3. 되도록 선언부에 한꺼번에 선언한다(영역 상단).

변수명 주의사항
   1. 문자로 시작해야 한다.
   2. 특수문자를 사용할 수 없다. 단, _는 허용한다.
   3. 소문자로 시작한다.
   4. 공백을 사용할 수 없다.
      good boy
      good_boy: 언더바 표기법
      goodBoy: 카멜 표기법
   5. 되도록 한글을 사용하지 않는다.
   6. 명사로 사용한다.
   7. 뜻이 있는 단어를 사용한다.
   
      a, b, c, d, e, f, ... (X)
      number, num, data, age, name, ... (O)

변수를 사용하는 이유
   1. 반복되는 값을 쉽게 관리하기 위해서
   2. 의미 없는 값을 하나의 정보로 만들기 위해서(자료구조)
----------------------------------------------------------------------------------------------------------------------------------------------------
상수
   항상 그대로인 수.
   값을 변경할 수 없도록 한다.

   final 자료형 상수명 = 값;

상수를 사용하는 이유
   값에 의미부여를 하기 위해서
----------------------------------------------------------------------------------------------------------------------------------------------------
형변환
   - 자동 형변환
      정수 + 정수 = 정수
      정수 + 실수 = 실수
      정수 + 문자 = 정수

      3 + 0.0 = 3.0
      10 / 3 = 3
      10 % 3 = 1
      'A' + 3 = 68
   
   - 강제 형변환
      (자료형)값
      (double)3

문자열 형변환
   1. 다른 자료형을 문자열로
      문자열과 다른 일반 자료형을 연결하면 결과는 문자열이 된다.

   2. 문자열을 다른 자료형으로
      일반 자료형은 일반 자료형끼리만 형변환이 가능하다.
      문자열 타입은 클래스 타입이므로, 일반 자료형의 클래스 타입의 도움을 받아야 한다.

      Integer.parseInt("") => 문자열에서 변환(추출)된 정수
      Double.parseDouble("") => 문자열에서 변환(추출)된 실수

-----------------------------------------------------------------------------------------------------
입력
	커서가 깜빡이고있는 상태를 입력 상태라고 한다.
	입력하기 전에 출력을 통해 어떤 값을 입력해야 할지 사용자에게 알려줘야 한다.

입력 클래스
	Scanner sc = new Scanner(System.in);
	자료형 변수명	값


	

입력 메소드
	next(): 사용자가 입력한 문자열 값
		- 사용자가 입력한 값 중 공백 또는 줄바꿈 문자(엔터)를 구분점으로 각 문자열을 분리한다.
		- 첫 번째 문자열은 첫 번째 next()에 담긴다.
		  두 번째 문자열은 두 번째 next()에 담기낟.
		........

	nextLine(): 사용자가 입력한 문자열 값
		- 공백 또는 줄바꿈 문자도 모두 값으로 취급하기 때문에 그대로 입력받는다.
----------------------------------------------------------------------------------------------------------------------------
연산자 
	기능이 있는 특수문자






-------------------------------------------------------------------




